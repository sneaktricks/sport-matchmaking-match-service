// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sneaktricks/sport-matchmaking-match-service/model"
)

func newMatch(db *gorm.DB, opts ...gen.DOOption) match {
	_match := match{}

	_match.matchDo.UseDB(db, opts...)
	_match.matchDo.UseModel(&model.Match{})

	tableName := _match.matchDo.TableName()
	_match.ALL = field.NewAsterisk(tableName)
	_match.ID = field.NewField(tableName, "id")
	_match.CreatedAt = field.NewTime(tableName, "created_at")
	_match.UpdatedAt = field.NewTime(tableName, "updated_at")
	_match.DeletedAt = field.NewField(tableName, "deleted_at")
	_match.Sport = field.NewString(tableName, "sport")
	_match.MinParticipants = field.NewInt32(tableName, "min_participants")
	_match.MaxParticipants = field.NewInt32(tableName, "max_participants")
	_match.StartsAt = field.NewTime(tableName, "starts_at")
	_match.EndsAt = field.NewTime(tableName, "ends_at")
	_match.Location = field.NewString(tableName, "location")
	_match.Description = field.NewString(tableName, "description")
	_match.ParticipationFee = field.NewInt64(tableName, "participation_fee")
	_match.RequiredEquipment = field.NewField(tableName, "required_equipment")
	_match.Level = field.NewString(tableName, "level")
	_match.ChatLink = field.NewString(tableName, "chat_link")
	_match.HostUserID = field.NewField(tableName, "host_user_id")

	_match.fillFieldMap()

	return _match
}

type match struct {
	matchDo matchDo

	ALL               field.Asterisk
	ID                field.Field
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	Sport             field.String
	MinParticipants   field.Int32
	MaxParticipants   field.Int32
	StartsAt          field.Time
	EndsAt            field.Time
	Location          field.String
	Description       field.String
	ParticipationFee  field.Int64
	RequiredEquipment field.Field
	Level             field.String
	ChatLink          field.String
	HostUserID        field.Field

	fieldMap map[string]field.Expr
}

func (m match) Table(newTableName string) *match {
	m.matchDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m match) As(alias string) *match {
	m.matchDo.DO = *(m.matchDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *match) updateTableName(table string) *match {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewField(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Sport = field.NewString(table, "sport")
	m.MinParticipants = field.NewInt32(table, "min_participants")
	m.MaxParticipants = field.NewInt32(table, "max_participants")
	m.StartsAt = field.NewTime(table, "starts_at")
	m.EndsAt = field.NewTime(table, "ends_at")
	m.Location = field.NewString(table, "location")
	m.Description = field.NewString(table, "description")
	m.ParticipationFee = field.NewInt64(table, "participation_fee")
	m.RequiredEquipment = field.NewField(table, "required_equipment")
	m.Level = field.NewString(table, "level")
	m.ChatLink = field.NewString(table, "chat_link")
	m.HostUserID = field.NewField(table, "host_user_id")

	m.fillFieldMap()

	return m
}

func (m *match) WithContext(ctx context.Context) *matchDo { return m.matchDo.WithContext(ctx) }

func (m match) TableName() string { return m.matchDo.TableName() }

func (m match) Alias() string { return m.matchDo.Alias() }

func (m match) Columns(cols ...field.Expr) gen.Columns { return m.matchDo.Columns(cols...) }

func (m *match) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *match) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 16)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["sport"] = m.Sport
	m.fieldMap["min_participants"] = m.MinParticipants
	m.fieldMap["max_participants"] = m.MaxParticipants
	m.fieldMap["starts_at"] = m.StartsAt
	m.fieldMap["ends_at"] = m.EndsAt
	m.fieldMap["location"] = m.Location
	m.fieldMap["description"] = m.Description
	m.fieldMap["participation_fee"] = m.ParticipationFee
	m.fieldMap["required_equipment"] = m.RequiredEquipment
	m.fieldMap["level"] = m.Level
	m.fieldMap["chat_link"] = m.ChatLink
	m.fieldMap["host_user_id"] = m.HostUserID
}

func (m match) clone(db *gorm.DB) match {
	m.matchDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m match) replaceDB(db *gorm.DB) match {
	m.matchDo.ReplaceDB(db)
	return m
}

type matchDo struct{ gen.DO }

func (m matchDo) Debug() *matchDo {
	return m.withDO(m.DO.Debug())
}

func (m matchDo) WithContext(ctx context.Context) *matchDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchDo) ReadDB() *matchDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchDo) WriteDB() *matchDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchDo) Session(config *gorm.Session) *matchDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchDo) Clauses(conds ...clause.Expression) *matchDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchDo) Returning(value interface{}, columns ...string) *matchDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchDo) Not(conds ...gen.Condition) *matchDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchDo) Or(conds ...gen.Condition) *matchDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchDo) Select(conds ...field.Expr) *matchDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchDo) Where(conds ...gen.Condition) *matchDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchDo) Order(conds ...field.Expr) *matchDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchDo) Distinct(cols ...field.Expr) *matchDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchDo) Omit(cols ...field.Expr) *matchDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchDo) Join(table schema.Tabler, on ...field.Expr) *matchDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchDo) LeftJoin(table schema.Tabler, on ...field.Expr) *matchDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchDo) RightJoin(table schema.Tabler, on ...field.Expr) *matchDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchDo) Group(cols ...field.Expr) *matchDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchDo) Having(conds ...gen.Condition) *matchDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchDo) Limit(limit int) *matchDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchDo) Offset(offset int) *matchDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *matchDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchDo) Unscoped() *matchDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchDo) Create(values ...*model.Match) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchDo) CreateInBatches(values []*model.Match, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchDo) Save(values ...*model.Match) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchDo) First() (*model.Match, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) Take() (*model.Match, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) Last() (*model.Match, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) Find() ([]*model.Match, error) {
	result, err := m.DO.Find()
	return result.([]*model.Match), err
}

func (m matchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Match, err error) {
	buf := make([]*model.Match, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchDo) FindInBatches(result *[]*model.Match, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchDo) Attrs(attrs ...field.AssignExpr) *matchDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchDo) Assign(attrs ...field.AssignExpr) *matchDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchDo) Joins(fields ...field.RelationField) *matchDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchDo) Preload(fields ...field.RelationField) *matchDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchDo) FirstOrInit() (*model.Match, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) FirstOrCreate() (*model.Match, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) FindByPage(offset int, limit int) (result []*model.Match, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchDo) Delete(models ...*model.Match) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchDo) withDO(do gen.Dao) *matchDo {
	m.DO = *do.(*gen.DO)
	return m
}
